// @license Â© 2019 Google LLC. Licensed under the Apache License, Version 2.0.
const e=window;const t=document;const n=e.localStorage;const i="(prefers-color-scheme: dark)";const a=["(prefers-color-scheme: light)","(prefers-color-scheme: no-preference)"];const o="light";const r="dark";const s="remember";const h="legend";const d="toggle";const c="switch";const l="appearance";const b="permanent";const m="mode";const p="colorschemechange";const k="permanentcolorscheme";const u="all";const g="dark-mode-toggle";const f=(e,t,n=t)=>{Object.defineProperty(e,n,{enumerable:true,get(){const e=this.getAttribute(t);return e===null?"":e},set(e){this.setAttribute(t,e)}})};const v=(e,t,n=t)=>{Object.defineProperty(e,n,{enumerable:true,get(){return this.hasAttribute(t)},set(e){if(e){this.setAttribute(t,"")}else{this.removeAttribute(t)}}})};const L=t.createElement("template");L.innerHTML=`\n<style>\n*,\n::before,\n::after {\n  box-sizing: border-box;\n}\n\n:host {\n  contain: content;\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\nform {\n  background-color: var(--${g}-background-color, transparent);\n  color: var(--${g}-color, inherit);\n  padding: 0;\n}\n\nfieldset {\n  border: none;\n}\n\nlegend {\n  font: var(--${g}-legend-font, inherit);\n  padding: 0;\n}\n\ninput,\nlabel {\n  cursor: pointer;\n}\n\nlabel {\n  padding: 0.15rem;\n}\n\ninput {\n  opacity: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\ninput:focus + label {\n  outline: rgb(229, 151, 0) auto 2px;\n  outline: -webkit-focus-ring-color auto 5px;\n}\n\nlabel::before {\n  content: "";\n  display: inline-block;\n  background-size: var(--${g}-icon-size, 1rem);\n  background-repeat: no-repeat;\n  height: var(--${g}-icon-size, 1rem);\n  width: var(--${g}-icon-size, 1rem);\n  vertical-align: middle;\n  margin: 0 0.5rem 0 0;\n}\n\nlabel[dir="rtl"]::before {\n  margin: 0 0 0 0.5rem;\n}\n\n#lightLabel::before {\n  background-image: var(--${g}-light-icon, none);\n}\n\n#darkLabel::before {\n  filter: var(--${g}-icon-filter, none);\n  background-image: var(--${g}-dark-icon, none);\n}\n\n#checkboxLabel::before {\n  background-image: var(--${g}-checkbox-icon, none);\n}\n\n#permanentLabel::before {\n  background-image: var(--${g}-remember-icon-unchecked, none);\n}\n\n#lightLabel,\n#darkLabel,\n#checkboxLabel {\n  font: var(--${g}-label-font, inherit);\n}\n\n#lightLabel:empty,\n#darkLabel:empty,\n#checkboxLabel:empty {\n  font-size: 0;\n  padding: 0;\n}\n\n#permanentLabel {\n  font: var(--${g}-remember-font, inherit);\n}\n\ninput:checked + #permanentLabel::before {\n  background-image: var(--${g}-remember-icon-checked, none);\n}\n\ninput:checked + #darkLabel,\ninput:checked + #lightLabel {\n  background-color: var(--${g}-active-mode-background-color, transparent);\n}\n\ninput:checked + #darkLabel::before,\ninput:checked + #lightLabel::before {\n  background-color: var(--${g}-active-mode-background-color, transparent);\n}\n\ninput:checked + #checkboxLabel::before {\n  filter: var(--${g}-icon-filter, none);\n}\n\ninput:checked + #checkboxLabel + aside #permanentLabel::before {\n  filter: var(--${g}-remember-filter, none);\n}\n\naside {\n  visibility: hidden;\n  margin-top: 0.15rem;\n}\n\n#lightLabel:focus-visible ~ aside,\n#darkLabel:focus-visible ~ aside,\n#checkboxLabel:focus-visible ~ aside {\n  visibility: visible;\n  transition: visibility 0s;\n}\n\n@media (hover: hover) {\n  aside {\n    transition: visibility 3s;\n  }\n\n  aside:hover {\n    visibility: visible;\n  }\n\n  #lightLabel:hover ~ aside,\n  #darkLabel:hover ~ aside,\n  #checkboxLabel:hover ~ aside {\n    visibility: visible;\n    transition: visibility 0s;\n  }\n\n  aside #permanentLabel:empty {\n    display: none;\n  }\n}\n</style>\n<form>\n<fieldset>\n  <legend></legend>\n\n  <input id="lightRadio" name="mode" type="radio">\n  <label id="lightLabel" for="lightRadio"></label>\n\n  <input id="darkRadio" name="mode" type="radio">\n  <label id="darkLabel" for="darkRadio"></label>\n\n  <input id="darkCheckbox" type="checkbox">\n  <label id="checkboxLabel" for="darkCheckbox"></label>\n\n  <aside>\n    <input id="permanentCheckbox" type="checkbox">\n    <label id="permanentLabel" for="permanentCheckbox"></label>\n  </aside>\n</fieldset>\n</form>`;export class DarkModeToggle extends HTMLElement{static get observedAttributes(){return[m,l,b,h,o,r,s]}constructor(){super();f(this,m);f(this,l);f(this,h);f(this,o);f(this,r);f(this,s);v(this,b);this._darkCSS=null;this._lightCSS=null;t.addEventListener(p,e=>{this.mode=e.detail.colorScheme;this._updateRadios();this._updateCheckbox()});t.addEventListener(k,e=>{this.permanent=e.detail.permanent;this.permanentCheckbox.checked=this.permanent});this._initializeDOM()}_initializeDOM(){const s=this.attachShadow({mode:"closed"});s.appendChild(L.content.cloneNode(true));this._darkCSS=t.querySelectorAll(`link[rel="stylesheet"][media="${i}"]`);this._darkCSS.forEach(e=>e.dataset.originalMedia=e.media);this._lightCSS=document.querySelectorAll(a.map(e=>{return`link[rel="stylesheet"][media*="${e}"]`}).join(", "));this._lightCSS.forEach(e=>e.dataset.originalMedia=e.media);this.lightRadio=s.querySelector("#lightRadio");this.lightLabel=s.querySelector("#lightLabel");this.darkRadio=s.querySelector("#darkRadio");this.darkLabel=s.querySelector("#darkLabel");this.darkCheckbox=s.querySelector("#darkCheckbox");this.checkboxLabel=s.querySelector("#checkboxLabel");this.legendLabel=s.querySelector("legend");this.permanentAside=s.querySelector("aside");this.permanentCheckbox=s.querySelector("#permanentCheckbox");this.permanentLabel=s.querySelector("#permanentLabel");const h=e.matchMedia("(prefers-color-scheme)").media!=="not all";if(h){e.matchMedia(i).addListener(({matches:e})=>{if(!this.permanent){this.mode=e?r:o;this._dispatchEvent(p,{colorScheme:this.mode})}})}const c=n.getItem(g);if(c&&[r,o].includes(c)){this.mode=c;this.permanentCheckbox.checked=true;this.permanent=true}else if(h){if(e.matchMedia(a[0]).matches||e.matchMedia(a[1]).matches){this.mode=o}else if(e.matchMedia(i).matches){this.mode=r}}if(!this.mode){this.mode=o}if(this.permanent&&!c){n.setItem(g,this.mode)}if(!this.appearance){this.appearance=d}this._updateAppearance();this._updateRadios();this._updateCheckbox();[this.lightRadio,this.darkRadio].forEach(e=>{e.addEventListener("change",()=>{this.mode=this.lightRadio.checked?o:r;this._updateCheckbox();this._dispatchEvent(p,{colorScheme:this.mode})})});this.darkCheckbox.addEventListener("change",()=>{this.mode=this.darkCheckbox.checked?r:o;this._updateRadios();this._dispatchEvent(p,{colorScheme:this.mode})});this.permanentCheckbox.addEventListener("change",()=>{this.permanent=this.permanentCheckbox.checked;this._dispatchEvent(k,{permanent:this.permanent})});this._updateMode();this._dispatchEvent(p,{colorScheme:this.mode});this._dispatchEvent(k,{permanent:this.permanent})}attributeChangedCallback(t,i,a){if(t===m){if(![o,r].includes(a)){throw new RangeError(`Allowed values: "${o}" and "${r}".`)}if(e.matchMedia("(hover: none)").matches&&this.remember){this._showPermanentAside()}if(this.permanent){n.setItem(g,this.mode)}this._updateRadios();this._updateCheckbox();this._updateMode()}else if(t===l){if(![d,c].includes(a)){throw new RangeError('Allowed values: "${TOGGLE}" and "${SWITCH}".')}this._updateAppearance()}else if(t===b){if(this.permanent){n.setItem(g,this.mode)}else{n.removeItem(g)}this.permanentCheckbox.checked=this.permanent}else if(t===h){this.legendLabel.textContent=a}else if(t===s){this.permanentLabel.textContent=a}else if(t===o){this.lightLabel.textContent=a;if(this.mode===o){this.checkboxLabel.textContent=a}}else if(t===r){this.darkLabel.textContent=a;if(this.mode===r){this.checkboxLabel.textContent=a}}}_dispatchEvent(e,t){this.dispatchEvent(new CustomEvent(e,{bubbles:true,composed:true,detail:t}))}_updateAppearance(){const e=this.appearance===d;this.lightRadio.hidden=e;this.lightLabel.hidden=e;this.darkRadio.hidden=e;this.darkLabel.hidden=e;this.darkCheckbox.hidden=!e;this.checkboxLabel.hidden=!e}_updateRadios(){if(this.mode===o){this.lightRadio.checked=true}else{this.darkRadio.checked=true}}_updateCheckbox(){if(this.mode===o){this.checkboxLabel.style.setProperty(`--${g}-checkbox-icon`,`var(--${g}-light-icon)`);this.checkboxLabel.textContent=this.light;this.darkCheckbox.checked=false}else{this.checkboxLabel.style.setProperty(`--${g}-checkbox-icon`,`var(--${g}-dark-icon)`);this.checkboxLabel.textContent=this.dark;this.darkCheckbox.checked=true}}_updateMode(){if(this.mode===o){this._lightCSS.forEach(e=>{e.media=u;e.disabled=false});this._darkCSS.forEach(e=>{e.media=e.dataset.originalMedia;e.disabled=true})}else{this._darkCSS.forEach(e=>{e.media=u;e.disabled=false});this._lightCSS.forEach(e=>{e.media=e.dataset.originalMedia;e.disabled=true})}}_showPermanentAside(){this.permanentAside.style.visibility="visible";e.setTimeout(()=>{this.permanentAside.style.visibility="hidden"},3e3)}}e.customElements.define(g,DarkModeToggle);